ROUTINE ZAUTHENTICATE
ZAUTHENTICATE(ServiceName,Namespace,Username,Password,Credentials,Properties) PUBLIC {
#include %occErrors
#include %sySecurity
 Set $ZTRAP="Error"
 Quit $SYSTEM.Status.OK()
Error //Handle any COS errors here
  //Reset error trap to avoid infinite loop
  Set $ZTRAP=""
  //Return the generalized COS error message #5002
  Quit $SYSTEM.Status.Error(5002 /*$$$CacheError*/,$ZERROR)
 }
 
GetCredentials(ServiceName,Namespace,Username,Password,Credentials) Public {
  
  Set UserExists = 0

  hang 5
  
  // For a web application, authenticate as AdminUser.
  If $ISOBJECT($GET(%request)) { 
	  Set App = $SYSTEM.Util.GetEnviron("ISC_App")
	  Set:App="" App = "/csp/sys"
	  Set GN = "^%ZAPM.AppsDelegate"
    If $EXTRACT(App,*)'="/" {
      Set App=App_"/" 
    }  
    
    If %request.Application=App || ($DATA(@GN@(App))) {
        
      Set source = %request.GetMimeData("file")
      Set username = %request.GetMimeData("username")
      If (source = "") {
          Set sourceBase64 = %request.Data("file",1)
          Set b64=$piece(sourceBase64,"base64,", 2)
          Set binary=$system.Encryption.Base64Decode(b64)
          Set source = ##class(%Stream.GlobalBinary).%New()
          Do source.Write(binary)
      }

      if (username = "") {
        Set username = %request.Data("username",1)
      }

      Set sql = "SELECT * FROM dc_facelogin.Face WHERE username = ?"
      Set tStatement = ##class(%SQL.Statement).%New()
      Set success = tStatement.%Prepare(sql)
      If success'= 1 { Write "%Prepare failed:" Do $System.Status.DisplayError(success) Quit }
      Set rset = tStatement.%Execute(username)
      set success = rset.%Next()
      Set face = ##class(dc.facelogin.Face).%OpenId(rset.ID)  
      
      Set sourceFile = ..SaveStreamAsTempFile(source, "png")
      Set targetFile = ..SaveStreamAsTempFile(face.face, "png")
      
      Set faceComparationResult = ..CompareFaces(sourceFile, targetFile)

      If faceComparationResult = 1 {
        Quit $SYSTEM.Status.OK()  
      }   
    }
  }
  
  // For all other conditions, deny access.
  Quit $SYSTEM.Status.Error($$$AccessDenied)

}